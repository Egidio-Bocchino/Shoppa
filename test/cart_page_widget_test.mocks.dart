// Mocks generated by Mockito 5.4.5 from annotations
// in shoppa/test/cart_page_widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:ui' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:shoppa/core/models/cart_item.dart' as _i3;
import 'package:shoppa/core/models/product_model.dart' as _i4;
import 'package:shoppa/core/models/purchase_model.dart' as _i7;
import 'package:shoppa/services/manager/purchase_manager.dart' as _i6;
import 'package:shoppa/services/provider/cart_provider.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CartProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartProvider extends _i1.Mock implements _i2.CartProvider {
  MockCartProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.CartItem> get productsInCart => (super.noSuchMethod(
        Invocation.getter(#productsInCart),
        returnValue: <_i3.CartItem>[],
      ) as List<_i3.CartItem>);

  @override
  int get itemCount => (super.noSuchMethod(
        Invocation.getter(#itemCount),
        returnValue: 0,
      ) as int);

  @override
  double get totalPrice => (super.noSuchMethod(
        Invocation.getter(#totalPrice),
        returnValue: 0.0,
      ) as double);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addToCart(_i4.Product? product) => super.noSuchMethod(
        Invocation.method(
          #addToCart,
          [product],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeFromCart(_i4.Product? product) => super.noSuchMethod(
        Invocation.method(
          #removeFromCart,
          [product],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAllOfProduct(_i4.Product? product) => super.noSuchMethod(
        Invocation.method(
          #removeAllOfProduct,
          [product],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearCart() => super.noSuchMethod(
        Invocation.method(
          #clearCart,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PurchaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockPurchaseManager extends _i1.Mock implements _i6.PurchaseManager {
  MockPurchaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Purchase> get purchases => (super.noSuchMethod(
        Invocation.getter(#purchases),
        returnValue: <_i7.Purchase>[],
      ) as List<_i7.Purchase>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i8.Future<void> loadPurchases() => (super.noSuchMethod(
        Invocation.method(
          #loadPurchases,
          [],
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);

  @override
  void addPurchase(
    List<_i3.CartItem>? items,
    double? totalPrice,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addPurchase,
          [
            items,
            totalPrice,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
